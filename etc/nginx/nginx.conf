user nginx;
worker_processes  4; # 4 # up to # cores (check lscpu)

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid          logs/nginx.pid;


events {
    worker_connections  1024;
    multi_accept on;
}


http {
    # passenger_root /usr/local/rvm/gems/ruby-2.1.1/gems/passenger-4.0.37;
    # passenger_ruby /usr/local/rvm/gems/ruby-2.1.1/wrappers/ruby;

    # passenger_user_switching on;
    # passenger_show_version_in_header off;
    # passenger_friendly_error_pages off;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    include         mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] $host "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    reset_timedout_connection on;

    proxy_cache_key                 $scheme$host$request_uri;
    proxy_cache_path                /var/cache/nginx/cached levels=2:2 keys_zone=global:64m inactive=60m max_size=1G;

    spdy_headers_comp 9;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_static on; # to serve pre-gzipped version
    gzip_proxied any; #expired no-cache no-store private auth;
    gzip_comp_level 6; # 2
    # gzip_buffers 16 8k;
    gzip_http_version 1.1;
    # gzip_types already includes text/html, don't include or you get a warning
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # A given server still needs to set "ssl on;"; this just centralizes it
    ssl_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;
    ssl_trusted_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;
    ssl_certificate_key /etc/ssl/localcerts/makeyourlaws.org.key;
    ssl_dhparam /etc/ssl/localcerts/dh2048.pem;
    ssl_prefer_server_ciphers On;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;
    # ssl_verify_client optional;
    # ssl_client_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;

    # Now for voodoo...

    # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/ recommends:
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
    # ryanc recommends:
    # ssl_ciphers -ALL:!aNULL:!eNULL:!EXPORT:!LOW:!MEDIUM:aRSA+kEECDH:aRSA+kEDH:@STRENGTH:HIGH;
    # others:
    # ssl_ciphers ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA;
    # ssl_ciphers AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4:HIGH:!MD5:!CBC:!aNULL:!EDH;
    # ssl_ciphers ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH;
    # ssl_ciphers ALL:!ADH:!EXP:!LOW:!RC2:!3DES:!SEED:!RC4:+HIGH:+MEDIUM;

    # Uncomment if nginx-naxsi installed
    # include naxsi_core.rules;

    geoip_country /usr/share/GeoIP/GeoIP.dat;
    geoip_city /usr/share/GeoIP/GeoIPCity.dat;

    # include conf.d/*.conf;
    include sites-enabled/*;

    server {
        listen 127.0.0.1:80;
        server_name 127.0.0.1;
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }
    }
}
